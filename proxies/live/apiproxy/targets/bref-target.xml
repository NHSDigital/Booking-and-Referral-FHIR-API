<TargetEndpoint name="booking-and-referral-target">
  <PreFlow>
    <Request>
      <Step>
        <Name>LookupCache.Targets</Name>
      </Step>
      <Step>
        <Name>RaiseFault.AddCapabilityStatement</Name>
        <Condition>(proxy.pathsuffix MatchesPath "/metadata") and ((request.verb = "GET") and (request.header.NHSD-Target-Identifier = null))</Condition>
      </Step>
      <Step>
        <Name>Python.DecodeBase64</Name>
        <Condition>request.header.NHSD-Target-Identifier != null</Condition>
      </Step>
      <Step>
        <Name>Javascript.UnpackVars</Name>
        <Condition>targets != null</Condition>
      </Step>
      <Step>
        <Name>Javascript.CheckTargets</Name>
        <Condition>targets != null</Condition>
      </Step>
      <Step>
        <Name>ServiceCallout.GetTargetsKvm</Name>
        <Condition>targets = null</Condition>
      </Step>
      <Step>
        <Name>PopulateCache.Targets</Name>
        <Condition>targets = null</Condition>
      </Step>
      <Step>
        <Name>AssignMessage.Targets</Name>
        <Condition>targets = null</Condition>
      </Step>
      <Step>
        <Name>Javascript.UnpackVars</Name>
      </Step>
      <Step>
        <Name>Javascript.SetTargetUrl</Name>
      </Step>
      <Step>
        <Name>RaiseFault.400InvalidHeaders</Name>
        <Condition>(request.header.X-Request-Id is null) or (request.header.X-Correlation-Id is null)</Condition>
      </Step>
      <Step>
        <Name>RaiseFault.400MalformedTargetIdentifier</Name>
        <Condition>idMalformed = true</Condition>
      </Step>
      <Step>
        <Name>RaiseFault.404ProxyNotFound</Name>
        <Condition>isError = true</Condition>
      </Step>
    </Request>
  </PreFlow>
  <FaultRules>
    <FaultRule name="rate_limiting_error">
      <Step>
        <Name>AssignMessage.429RateLimitingErrorResponse</Name>
      </Step>
      <Condition>raisefault.RaiseFault.QuotaPerApp.failed</Condition>
    </FaultRule>
    <FaultRule name="metadata_capability_statement">
      <Step>
        <Name>AssignMessage.AddCapabilityStatement</Name>
      </Step>
      <Condition>raisefault.RaiseFault.AddCapabilityStatement.failed</Condition>
    </FaultRule>
  </FaultRules>
  <DefaultFaultRule>
    <Step>
      <Name>AssignMessage.403ReceiverMtlsResponse</Name>
      <Condition>response.status.code = 403</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.404ProxyNotFoundErrorResponse</Name>
      <Condition>isError = true</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.400InvalidBase64Encoding</Name>
      <Condition>script.Python.DecodeBase64.failed = true</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.408TimeoutErrorResponse</Name>
      <Condition>error.status.code = 504</Condition>
    </Step>
    <Step>
      <Name>ExtractVariables.OperationOutcomeCode</Name>
    </Step>
    <Step>
      <Name>AssignMessage.400InvalidTargetIdentifierValue</Name>
      <Condition>idMalformed = true</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.500ServerErrorNoStoreErrorResponse</Name>
      <Condition>(error.status.code = 500) and (operation-outcome.code = "no-store")</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.500ServerErrorExceptionErrorResponse</Name>
      <Condition>(error.status.code = 500) and (operation-outcome.code != "no-store")</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.503ServiceUnavailableErrorResponse</Name>
      <Condition>error.status.code = 503</Condition>
    </Step>
  </DefaultFaultRule>
  <HTTPTargetConnection>
        <Properties>
            <Property name="io.timeout.millis">32000</Property>
        </Properties>
    <URL>https://mocktarget.apigee.net</URL>
    <SSLInfo>
      <Enabled>true</Enabled>
      <ClientAuthEnabled>true</ClientAuthEnabled>
      <KeyStore>ref://bars-client</KeyStore>
      <KeyAlias>cert</KeyAlias>
    </SSLInfo>
  </HTTPTargetConnection>
</TargetEndpoint>
