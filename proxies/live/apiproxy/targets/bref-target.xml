<TargetEndpoint name="booking-and-referral-target">
  <PreFlow>
    <Request>
     <Step>
        <Name>RaiseFault.404PageNotFound</Name>
        <Condition>
                  (proxy.pathsuffix Not Matches "/metadata")
                  AND (proxy.pathsuffix Not Matches "/$process-message")
                  AND (proxy.pathsuffix Not Matches "/Slot*")
                  AND (proxy.pathsuffix Not Matches "/Appointment*")
                  AND (proxy.pathsuffix Not Matches "/ServiceRequest*")
                  AND (proxy.pathsuffix Not Matches "/registry*")
                  AND (proxy.pathsuffix Not Matches "/DocumentReference*")
                  AND (proxy.pathsuffix Not Matches "/MessageDefinition*")
        </Condition>
      </Step>
      <Step>
        <Name>OauthV2.VerifyAccessToken</Name>
      </Step>
      <Step>
        <Name>FlowCallout.ApplyRateLimiting</Name>
      </Step>
      <Step>
          <Name>LookupCache.Targets</Name>
      </Step>
      <Step>
          <Name>Python.DecodeBase64</Name>
          <Condition>request.header.NHSD-Target-Identifier != null</Condition>
      </Step>
      <Step>
          <Name>Javascript.UnpackVars</Name>
          <Condition>targets != null</Condition>
      </Step>
      <Step>
          <Name>Javascript.CheckTargets</Name>
          <Condition>targets != null</Condition>
      </Step>
      <Step>
          <Name>ServiceCallout.GetTargetsKvm</Name>
          <Condition>targets = null or idNotFound = true</Condition>
      </Step>
      <Step>
          <Name>PopulateCache.Targets</Name>
          <Condition>targets = null or idNotFound = true</Condition>
      </Step>
      <Step>
          <Name>AssignMessage.Targets</Name>
          <Condition>targets = null or idNotFound = true</Condition>
      </Step>
      <Step>
          <Name>Javascript.UnpackVars</Name>
      </Step>
       <Step>
          <Name>Javascript.SetTargetUrl</Name>
      </Step>
      <Step>
        <Name>RaiseFault.400MalformedTargetIdentifier</Name>
        <Condition>idMalformed = true</Condition>
      </Step>
      <Step>
          <Name>RaiseFault.404ProxyNotFound</Name>
          <Condition>isError = true</Condition>
      </Step>
    </Request>
  </PreFlow>
  <FaultRules>
    <FaultRule name="rate_limiting_error">
      <Step>
        <Name>AssignMessage.429RateLimitingErrorResponse</Name>
      </Step>
      <Condition>raisefault.RaiseFault.QuotaPerApp.failed</Condition>
    </FaultRule>
  </FaultRules>
  <DefaultFaultRule>
    <Step>
      <Name>AssignMessage.403ForbiddenErrorResponse</Name>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.fault.name  = "keymanagement.service.invalid_access_token"</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.401UnauthorizedErrorResponse</Name>
      <Condition>oauthV2.OauthV2.VerifyAccessToken.fault.name  = "oauth.v2.InvalidAccessToken"</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.404ProxyNotFoundErrorResponse</Name>
      <Condition>isError = true</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.400InvalidBase64Encoding</Name>
      <Condition>script.Python.DecodeBase64.failed = true</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.408TimeoutErrorResponse</Name>
      <Condition>response.status.code = 408</Condition>
    </Step>
    <Step>
      <Name>ExtractVariables.OperationOutcomeCode</Name>
    </Step>
    <Step>
      <Name>AssignMessage.400InvalidTargetIdentifierValue</Name>
      <Condition>idMalformed = true</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.500ServerErrorNoStoreErrorResponse</Name>
      <Condition>(response.status.code = 500) and (operation-outcome.code = "no-store")</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.500ServerErrorExceptionErrorResponse</Name>
      <Condition>(response.status.code = 500) and (operation-outcome.code != "no-store")</Condition>
    </Step>
    <Step>
      <Name>AssignMessage.503ServiceUnavailableErrorResponse</Name>
      <Condition>response.status.code = 503</Condition>
    </Step>
  </DefaultFaultRule>
  <HTTPTargetConnection>
    <URL>https://mocktarget.apigee.net</URL>
    <SSLInfo>
      <Enabled>true</Enabled>
      <ClientAuthEnabled>true</ClientAuthEnabled>
      <KeyStore>ref://bars-client</KeyStore>
      <KeyAlias>cert</KeyAlias>
    </SSLInfo>
  </HTTPTargetConnection>
</TargetEndpoint>
